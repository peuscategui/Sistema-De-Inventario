const fs = require('fs').promises;
const path = require('path');

async function verificarCsvDetallado() {
    try {
        console.log('üîç VERIFICACI√ìN DETALLADA DEL CSV');
        console.log('==================================');

        const csvFilePath = path.join(__dirname, 'excel-templates', '05_inventory.csv');
        const fileContent = await fs.readFile(csvFilePath, { encoding: 'utf8' });

        const lines = fileContent.split('\n').filter(line => line.trim().length > 0);
        
        console.log(`üìä Total de l√≠neas: ${lines.length}`);
        
        // Analizar el header
        const header = lines[0];
        const headerColumns = header.split(',');
        console.log(`\nüìã HEADER (${headerColumns.length} columnas):`);
        headerColumns.forEach((col, index) => {
            console.log(`   ${index}: "${col}"`);
        });

        // Analizar la primera l√≠nea de datos
        const primeraLinea = lines[1];
        const primeraColumns = primeraLinea.split(',');
        console.log(`\nüìã PRIMERA L√çNEA DE DATOS (${primeraColumns.length} columnas):`);
        primeraColumns.forEach((col, index) => {
            console.log(`   ${index}: "${col}"`);
        });

        // Buscar las columnas espec√≠ficas
        console.log('\nüéØ COLUMNAS ESPEC√çFICAS:');
        console.log(`   Columna 25 (clasificacionId): "${primeraColumns[25]}"`);
        console.log(`   Columna 26 (empleadoId): "${primeraColumns[26]}"`);
        console.log(`   Columna 27: "${primeraColumns[27] || 'NO EXISTE'}"`);

        // Verificar si hay m√°s columnas
        if (primeraColumns.length > 27) {
            console.log('\n‚ö†Ô∏è HAY M√ÅS DE 27 COLUMNAS:');
            for (let i = 27; i < primeraColumns.length; i++) {
                console.log(`   Columna ${i}: "${primeraColumns[i]}"`);
            }
        }

    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

verificarCsvDetallado();
