# Multi-stage build para optimizar el tamaño de la imagen final
FROM node:18.17-bullseye-slim as builder

# Crear directorio de trabajo
WORKDIR /app

# Copiar archivos de dependencias del frontend
COPY frontend/package*.json ./

# Instalar dependencias
RUN npm ci --legacy-peer-deps

# Copiar código fuente del frontend
COPY frontend/ ./

# Variables de entorno para build
ARG NEXT_PUBLIC_API_URL=http://localhost:3002
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NODE_ENV=production

# Deshabilitar telemetría de Next.js
ENV NEXT_TELEMETRY_DISABLED=1

# Construir la aplicación
RUN npm run build

# Etapa de producción
FROM node:18.17-bullseye-slim as production

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario no-root para seguridad
RUN groupadd -r nextjs && useradd -r -g nextjs nextjs

# Crear directorio de trabajo
WORKDIR /app

# Variables de entorno
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Copiar archivos necesarios desde builder
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Cambiar propiedad de archivos al usuario nextjs
RUN chown -R nextjs:nextjs /app

# Cambiar a usuario no-root
USER nextjs

# Exponer puerto
EXPOSE 3000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Comando para iniciar la aplicación
CMD ["node", "server.js"] 